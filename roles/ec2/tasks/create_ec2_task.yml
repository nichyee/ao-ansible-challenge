---
- name: create private/public keys for the ec2 instanace
  shell: >
    yes y | ssh-keygen -t rsa -b 4096 -m PEM -N "" -f {{ win_ec2_private_key_path|quote }}
  args:
    creates: '{{ win_ec2_private_key_path }}'
  no_log: true

- name: create ec2 keypair for win ec2 instances
  ec2_key:
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    security_token: "{{ session_token }}"
    region: "{{ ec2_region }}"
    name: "{{ win_ec2_key_name }}"
    key_material: "{{ item }}"
    force: true
  no_log: true
  ignore_errors: true
  with_file: "{{ win_ec2_public_key_path }}"

- name: Lookup latest released image
  ec2_ami_facts:
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    security_token: "{{ session_token }}"
    owners: '{{ image_owner }}'
    region: '{{ ec2_region }}'
    filters:
      name: '{{ image_filter_name }}'

- name: Set image_id 
  set_fact:
    image_id: "{{ vanilla_images.images[-1].image_id }}"

- name: Debug output
  debug:
    msg: 'Latest released {{ os }} image: {{ image_id }}'
  ignore_errors: yes

- name: Launch Windows EC2 Instance
  ec2:
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    security_token: "{{ session_token }}"
    group_id: "{{ ec2_security_group_id }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ image_id }}"
    wait: true
    region: "{{ ec2_region }}"
    keypair: "{{ win_ec2_key_name }}"
    count: 1
    user_data: '{{ lookup("file", win_userdata_filepath ) }}'
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: "{{ ebs_device_name }}"
        device_type: "{{ ebs_volume_type }}"
        volume_size: "{{ ebs_volume_size }}"
        delete_on_termination: true
    instance_tags:
      Name: "{{ main_name }}-instance"
      Application: "{{ application }}"
      BusOwner: "{{ ec2_tag_busowner }}"
      BusPrimaryContact: "{{ ec2_tag_busprimarycontact }}"
      Controlled: "{{ ec2_tag_controlled }}"
      Costcentre: "{{ ec2_tag_costcentre }}"
      CostCentreOwner: "{{ ec2_tag_costcentreowner }}"
      Criticality: "{{ ec2_tag_criticality }}"
      Customer: "{{ ec2_tag_customer }}"
      Dynatrace: "{{ ec2_tag_dynatrace }}"
      EnvInstanceName: '{{ ec2_tag_role }}{{ ec2_tag_environment }}'
      Environment: '{{ ec2_tag_environment }}'
      Classification: "{{ ec2_tag_classification }}"
      ManagedBy: "{{ ec2_tag_managedby }}"
      OS: "{{ os }}"
      Owner: "{{ ec2_tag_owner }}"
      Project: "{{ ec2_tag_project }}"
      Practice: "{{ ec2_tag_practice }}"
      Role: '{{ ec2_tag_role }}'
      TechOwner: "{{ ec2_tag_techowner }}"
      AMI: "{{ ec2_tag_ami_inventory }}"
  register: win_ec2_instance_soe

# - name: Add new instance to host group
#   add_host:
#     hostname: "{{ item.private_ip }}"
#     groupname: launched
#   loop: "{{ win_ec2_instance_soe.instances if (application == 'SOE') else win_ec2_instance_app.instances }}"

- set_stats:
    data:
      instanceid: "{{ win_ec2_instance_soe.instance_ids if (application == 'SOE') else win_ec2_instance_app.instance_ids }}"

- name: Pause for instance to initialise
  pause:
    minutes: 4

- name: output results
  debug:
    msg:
      - "{{ win_ec2_instance_soe if (application == 'SOE') else win_ec2_instance_app }}"

- name: debug private_ip
  debug:
    msg: "private_ip: {{ item.private_ip }}"
  loop: "{{ win_ec2_instance_soe.instances if (application == 'SOE') else win_ec2_instance_app.instances }}"

- name: set private ip as a variable
  set_stats:
    data:
      var_ec2_ip: "{{ item.private_ip }}"
  loop: "{{ win_ec2_instance_soe.instances if (application == 'SOE') else win_ec2_instance_app.instances }}"

- name: obtain initial passwords for win ec2 instance(s)
  ec2_win_password:
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    security_token: "{{ session_token }}"
    region: "{{ ec2_region }}"
    instance_id: "{{ win_ec2_instance_soe.instances[0].id if (application == 'SOE') else win_ec2_instance_app.instances[0].id }}"
    key_file: "{{ win_ec2_private_key_path }}"
    wait: yes
    wait_timeout: "{{ win_ec2_password_wait_timeout|default(omit) }}"
  no_log: true
  register: win_ec2_password
  tags: get_ec2_password

- name:  set ec2 password as a variable stat
  set_stats:
    data:
      var_ec2_password: "{{ win_ec2_password.win_password }}"
  no_log: true

- name: wait for win ec2 instances to listen on winrm https port
  wait_for:
    state: started
    host: "{{ item.private_ip }}"
    port: "{{ win_ec2_winrm_port }}"
    timeout: "{{ win_ec2_wait_for_timeout }}"
    delay: "{{ win_ec2_wait_for_delay|default(omit) }}"
  loop: "{{ win_ec2_instance_soe.instances if (application == 'SOE') else win_ec2_instance_app.instances }}"